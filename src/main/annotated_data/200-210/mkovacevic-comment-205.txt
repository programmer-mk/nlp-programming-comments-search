/// <summary>
/// Klasa koja sadrži metode za enkripciju i dekriptiranje sadržaja pomoću DES algoritma
/// </summary>

public class TripleDesEnkripcija : Enkripcija
{
    /// <summary>
    /// Metoda koja enkriptira sadržaj na temelju ključa i inicijalizacijskoga vektora
    /// </summary>
    /// <param name="dataToEncrypt"></param>
    /// <returns></returns>
    public override string EncryptData(string dataToEncrypt)
    {
        var data = Encoding.UTF8.GetBytes(dataToEncrypt);
        using (var des = new TripleDESCryptoServiceProvider())
        {
            des.Mode = CipherMode.CBC;
            des.Padding = PaddingMode.PKCS7;
            des.Key = key;
            des.IV = IV;
            using (var memoryStream = new MemoryStream())
            {
                var cryptoStream = new CryptoStream(memoryStream,
                des.CreateEncryptor(), CryptoStreamMode.Write);
                cryptoStream.Write(data, 0, data.Length);
                cryptoStream.FlushFinalBlock();
                return Convert.ToBase64String(memoryStream.ToArray());
            }
        }
    }

    /// <summary>
    /// Metoda koja dekriptira sadržaj na temelju ključa i inicijalizacijskoga vektora
    /// </summary>
    /// <param name="dataToDecrypt"></param>
    /// <returns></returns>
    public override string DecryptData(string dataToDecrypt)
    {
        string result;
        var data = Convert.FromBase64String(dataToDecrypt);
        using (var des = new TripleDESCryptoServiceProvider())
        {
            des.Mode = CipherMode.CBC;
            des.Padding = PaddingMode.PKCS7;
            des.Key = key;
            des.IV = IV;
            using (var memoryStream = new MemoryStream())
            {
                var cryptoStream = new CryptoStream(memoryStream,
                des.CreateDecryptor(), CryptoStreamMode.Write);
                cryptoStream.Write(data, 0, data.Length);
                cryptoStream.FlushFinalBlock();
                var decryptBytes = memoryStream.ToArray();
                result = Encoding.UTF8.GetString(decryptBytes);
                return result;
            }
        }
    }

    /// <summary>
    /// Override metoda koja generira pripadajući ključ i inicjalizacijski vektor odgovarajuće veličine
    /// </summary>
    public override void GenerirajKljucIV()
    {
        key = GenerirajRandomBroj(24);
        IV = GenerirajRandomBroj(8);
    }
}

https://github.com/foivz/r16003/blob/a772a8a7ee0a5da227257216ecc675c48e3699c1/CryptoNew/CryptoNew/TripleDesEnkripcija.cs