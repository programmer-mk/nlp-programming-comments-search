/// <summary>
/// Metoda koja služi za dohvaćanje ispravno unesenih osoba, redaka
/// </summary>
/// <param name="nizRedaka"></param>
/// <param name="splitter"></param>
/// <returns>Vraća listu ispravnih podataka</returns>


private static List<Osoba> DohvatiIspravneOsobe(string[] nizRedaka, char splitter)
{
    List<Osoba> izlaznaLista = new List<Osoba>();
    string[] atributiZaglavlja = nizRedaka[0].Split(splitter);
    for (int i = 1; i < nizRedaka.Length; i++)
    {
        int brojGresaka = 0;
        string[] privremeniObjekt = nizRedaka[i].Split(splitter);
        if (!Datoteka.ProvjeriBrojAtributa(privremeniObjekt, atributiZaglavlja.Length))
        {
            brojGresaka++;
            Console.Write("Neispravan broj atributa! --> ");
        }
        else if (!Datoteka.IspravanInt(privremeniObjekt[0]))
        {
            brojGresaka++;
            Console.Write("ID osobe mora biti cijeli broj! --> ");
        }
        else if (!Datoteka.IspravanString(privremeniObjekt[1]))
        {
            brojGresaka++;
            Console.Write("Neispravno ime i prezime osobe! --> ");
        }
        else if (!Datoteka.IspravanInt(privremeniObjekt[2]))
        {
            brojGresaka++;
            Console.Write("Ugovor mora biti cijeli broj! --> ");
        }
        else if (int.Parse(privremeniObjekt[2].Trim()) != 0 && int.Parse(privremeniObjekt[2].Trim()) != 1)
        {
            brojGresaka++;
            Console.Write("Ugovor mora biti 0 ili 1! --> ");
        }


        if (brojGresaka != 0)
        {
            Ispis.IspisGreskeRedak(i, nizRedaka[i]);
        }
        else
        {
            izlaznaLista.Add(IzradiOsobu(privremeniObjekt));
        }
    }
    return izlaznaLista;
}

https://github.com/mmacinkov/Design-patterns/blob/d33b2791054ce02d97ee63c685a9d662c603e209/mmacinkov_zadaca_3/UcitavanjeDatoteka/OsobeTXT.cs