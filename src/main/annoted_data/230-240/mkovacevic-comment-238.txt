/// <summary>
/// Metoda za binarnu pretragu niza. Niz mora biti
/// sortiran po rastucem redosledu.
/// </summary>
/// <param name="a">Niz koji pretrazujemo</param>
/// <param name="value">Vrednost koju trazimo</param>
/// <param name="pos">Indeks prvog pronadjenog elementa</param>
/// <returns>Da li je element pronadjen</returns>

public static bool Search<T>(this IList<T> a, T value, out int pos, Comparison<T> customComparer = null)
{
    pos = 0;

    if (a == null)
        throw new ArgumentException("Valule can not be null", "a");

    //Preuzimanje comparer metode
    Comparison<T> comparer = FetchComparer(customComparer);
    int left = 0;
    int right = a.Count - 1;
    int compareValue = 0;

    while (right >= left)
    {
        //trazimo srednji element
        pos = (right + left) / 2;
        compareValue = comparer(value, a[pos]);

        //uporedjujemo
        if (compareValue < 0)
        {
            //uzimamo LEVI podniz
            right = pos - 1;
        }
        else if (compareValue > 0)
        {
            //uzimamo DESNI podniz
            left = pos + 1;
        }
        else
        {
            return true;
        }
    }

    return false;
}

https://github.com/jasaleja/SDD_projekat/blob/5dbfa6e73fd177e1e59790d950cf8761a5fc0fae/SDDLibrary/Utils/BinarySearch.cs